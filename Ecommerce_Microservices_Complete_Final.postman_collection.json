{
  "info": {
    "_postman_id": "ecommerce-microservices-complete-final-2025",
    "name": "üõí Ecommerce Microservices - Complete Final Collection (Security Disabled)",
    "description": "API collection for microservices with security disabled.\n\nüèóÔ∏è **Architecture Overview:**\n- Gateway Service (9090): Central routing with Circuit Breaker & Rate Limiting\n- Discovery Service (8761): Service registration and discovery\n- Product Service (8080): Product catalog management\n- Order Service (8081): Order processing\n- Inventory Service (8082): Stock management\n- Notification Service (8083): Event processing\n\n‚ö° **Features:**\n- Circuit Breaker Protection\n- Redis Rate Limiting\n- Service Discovery\n- Kafka Event Processing\n- Redis Caching\n\nüîí **Security Note:**\n- Security is currently disabled\n- Auth Service endpoints are commented out\n- No JWT token required for requests\n\nüèóÔ∏è **Architecture:**\n- Gateway Service: Port 9090 (Central API Gateway with Circuit Breaker \u0026 Rate Limiting)\n- Auth Service: Port 8084 (JWT authentication and user management)\n- Product Service: Port 8080 (Product catalog management)\n- Order Service: Port 8081 (Order processing and management)\n- Inventory Service: Port 8082 (Stock management)\n- Notification Service: Port 8083 (Event-based notifications via Kafka)\n- Discovery Service: Port 8761 (Eureka server for service discovery)\n\nüîÑ **Access Methods:**\n1. **Via Gateway (Recommended)** - Use {{gatewayUrl}} for production-like routing with protection\n2. **Direct Service Access** - Use individual service URLs for development/debugging\n\n‚ö° **Infrastructure Components:**\n- Circuit Breaker Protection (Resilience4j)\n- Rate Limiting (Redis-based, 10 requests/second for products, 5 for orders, 15 for inventory)\n- Service Discovery (Eureka)\n- Message Streaming (Apache Kafka)\n- Caching (Redis)\n- In-memory Database (H2)\n\nüìã **Test Categories:**\n- Authentication and Authorization\n- Gateway Service Health \u0026 Fallback APIs\n- Product Service CRUD Operations\n- Order Service Management\n- Inventory Service Stock Management\n- Notification Service Event Processing\n- User Service Profile Management\n- Rate Limiting Tests\n- Circuit Breaker Tests\n- End-to-End Integration Testing\n- Error Handling \u0026 Resilience Testing\n- Infrastructure Component Testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "ecommerce-complete-final",
    "version": {
      "major": 2,
      "minor": 0,
      "patch": 0
    }
  },
  "item": [
    {
      "name": "üîí Auth Endpoints (Disabled)",
      "description": "Authentication endpoints - Currently disabled as security is turned off",
      "item": [
        {
          "name": "Direct Auth Test (Debug)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Just log the response without any processing",
                  "if (!pm.response) {",
                  "    console.log(\"Error: pm.response is undefined\");",
                  "    return;",
                  "}",
                  "console.log(\"Response Status: \" + (pm.response.code || \u0027No status code\u0027));",
                  "console.log(\"Response Body: \" + (pm.response.text() || \u0027No response text\u0027));",
                  "try {",
                  "    var jsonData = pm.response.json();",
                  "    console.log(\"Response as JSON: \" + JSON.stringify(jsonData, null, 2));",
                  "    if (jsonData) {",
                  "        console.log(\"Token field exists: \" + (jsonData.token !== undefined));",
                  "        console.log(\"AccessToken field exists: \" + (jsonData.accessToken !== undefined));",
                  "        console.log(\"Type of response: \" + typeof jsonData);",
                  "        console.log(\"Available fields: \" + Object.keys(jsonData));",
                  "    } else {",
                  "        console.log(\"jsonData is null or undefined\");",
                  "    }",
                  "} catch(e) {",
                  "    console.log(\"Error parsing response: \" + e.message);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"john_doe\",\n  \"password\": \"test1234\"\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/auth/signin",
              "host": ["{{gatewayUrl}}"],
              "path": ["auth", "signin"]
            },
            "description": "Debug request to directly test authentication service response"
          },
          "response": []
        },
        {
          "name": "Test Response Structure (Debug)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Very simple response structure test - avoid any complex operations",
                  "try {",
                  "    // Check if we have a response",
                  "    if (!pm.response) {",
                  "        console.log(\"Error: pm.response is undefined\");",
                  "        return;",
                  "    }",
                  "    ",
                  "    // Log basic response info",
                  "    console.log(\"Response Status: \" + pm.response.code);",
                  "    ",
                  "    // Get response as text first",
                  "    var responseText = pm.response.text();",
                  "    console.log(\"Response Body: \" + responseText);",
                  "    ",
                  "    // Only try to parse if we have content",
                  "    if (responseText \u0026\u0026 responseText.trim()) {",
                  "        try {",
                  "            var jsonData = JSON.parse(responseText);",
                  "            console.log(\"Response parsed as JSON successfully\");",
                  "            ",
                  "            // Safely check for object type and log fields",
                  "            if (jsonData \u0026\u0026 typeof jsonData === \u0027object\u0027) {",
                  "                console.log(\"Available fields: \" + Object.keys(jsonData).join(\u0027, \u0027));",
                  "                ",
                  "                // Log specific fields we\u0027re interested in",
                  "                console.log(\"Has token field: \" + (jsonData.token !== undefined));",
                  "                console.log(\"Has accessToken field: \" + (jsonData.accessToken !== undefined));",
                  "            } else {",
                  "                console.log(\"Response is not a JSON object\");",
                  "            }",
                  "        } catch(e) {",
                  "            console.log(\"Error parsing JSON: \" + e.message);",
                  "        }",
                  "    } else {",
                  "        console.log(\"Response body is empty\");",
                  "    }",
                  "} catch(e) {",
                  "    console.log(\"Script error: \" + e.message);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/auth/test-response",
              "host": ["{{gatewayUrl}}"],
              "path": ["auth", "test-response"]
            },
            "description": "Debug request to test response structure from auth service"
          },
          "response": []
        },
        {
          "name": "User Registration (Register)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"john_doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"test1234\",\n  \"roles\": [\"user\"]\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/auth/register",
              "host": ["{{gatewayUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user with basic user role"
          },
          "response": []
        },
        {
          "name": "User Login (Signin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Simple and direct approach to extract token",
                  "try {",
                  "    // Log basic response info",
                  "    console.log(\u0027Response status: \u0027 + (pm.response ? pm.response.code : \u0027No response code\u0027));",
                  "",
                  "    // Only proceed if we have a valid response",
                  "    if (pm.response \u0026\u0026 pm.response.code === 200) {",
                  "        // Get response as text first to log it",
                  "        var responseText = pm.response.text();",
                  "        console.log(\u0027Response received: \u0027 + responseText);",
                  "        ",
                  "        // Try to parse as JSON",
                  "        try {",
                  "            var jsonData = JSON.parse(responseText);",
                  "            ",
                  "            // Direct token extraction - no complex logic",
                  "            if (jsonData) {",
                  "                if (jsonData.token) {",
                  "                    pm.environment.set(\u0027auth_token\u0027, jsonData.token);",
                  "                    console.log(\u0027Token saved from token field\u0027);",
                  "                } else if (jsonData.accessToken) {",
                  "                    pm.environment.set(\u0027auth_token\u0027, jsonData.accessToken);",
                  "                    console.log(\u0027Token saved from accessToken field\u0027);",
                  "                } else {",
                  "                    console.log(\u0027No token found in expected fields\u0027);",
                  "                    console.log(\u0027Available fields: \u0027 + Object.keys(jsonData).join(\u0027, \u0027));",
                  "                }",
                  "            } else {",
                  "                console.log(\u0027Response parsed as JSON but is null or undefined\u0027);",
                  "            }",
                  "        } catch (e) {",
                  "            console.log(\u0027Error parsing JSON: \u0027 + e.message);",
                  "        }",
                  "    } else {",
                  "        console.log(\u0027No valid response or non-200 status code\u0027);",
                  "    }",
                  "} catch (error) {",
                  "    console.log(\u0027Script error: \u0027 + error.message);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"john_doe\",\n  \"password\": \"test1234\"\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/auth/signin",
              "host": ["{{gatewayUrl}}"],
              "path": ["auth", "signin"]
            },
            "description": "Authenticate user and get JWT token - automatically saves token to environment variable"
          },
          "response": []
        },
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "    if (!pm.response) {",
                  "        console.log(\"Error: pm.response is undefined\");",
                  "        return;",
                  "    }",
                  "    if (pm.response.code === 200) {",
                  "        try {",
                  "            var jsonData = pm.response.json();",
                  "            if (jsonData \u0026\u0026 jsonData.token) {",
                  "                pm.environment.set(\"admin_token\", jsonData.token);",
                  "                console.log(\"Admin token saved: \" + jsonData.token);",
                  "            } else if (jsonData \u0026\u0026 jsonData.accessToken) {",
                  "                pm.environment.set(\"admin_token\", jsonData.accessToken);",
                  "                console.log(\"Admin token saved from accessToken: \" + jsonData.accessToken);",
                  "            } else {",
                  "                console.log(\"Admin token not found in response. Response body: \" + JSON.stringify(jsonData));",
                  "            }",
                  "        } catch (jsonError) {",
                  "            console.log(\"Error parsing JSON: \" + jsonError.message);",
                  "            console.log(\"Response text: \" + (pm.response.text() || \u0027No response text\u0027));",
                  "        }",
                  "    } else {",
                  "        console.log(\"Non-200 response received: \" + pm.response.code);",
                  "        console.log(\"Response body: \" + (pm.response.text() || \u0027No response text\u0027));",
                  "    }",
                  "} catch (error) {",
                  "    console.log(\"Error in test script: \" + error.message);",
                  "    if (pm.response) {",
                  "        console.log(\"Response body: \" + (pm.response.text() || \u0027No response text\u0027));",
                  "    } else {",
                  "        console.log(\"pm.response is undefined\");",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/auth/signin",
              "host": ["{{gatewayUrl}}"],
              "path": ["auth", "signin"]
            },
            "description": "Login with admin credentials - automatically saves admin token to environment variable"
          },
          "response": []
        },
        {
          "name": "Create Moderator User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"moderator_user\",\n  \"email\": \"moderator@example.com\",\n  \"password\": \"mod1234\",\n  \"roles\": [\"mod\"]\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/auth/register",
              "host": ["{{gatewayUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new moderator user"
          },
          "response": []
        },
        {
          "name": "H2 Console Access",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/auth/h2-console",
              "host": ["{{gatewayUrl}}"],
              "path": ["auth", "h2-console"]
            },
            "description": "Access H2 console through gateway (redirects to H2 database console)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üéØ Gateway Service APIs",
      "description": "Gateway health checks, route management, and fallback endpoints",
      "item": [
        {
          "name": "Gateway Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/actuator/health",
              "host": ["{{gatewayUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Check if Gateway Service is running and healthy"
          },
          "response": []
        },
        {
          "name": "View Gateway Routes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/actuator/gateway/routes",
              "host": ["{{gatewayUrl}}"],
              "path": ["actuator", "gateway", "routes"]
            },
            "description": "View all configured routes in the gateway"
          },
          "response": []
        },
        {
          "name": "Gateway Fallback - General",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/fallback",
              "host": ["{{gatewayUrl}}"],
              "path": ["fallback"]
            },
            "description": "Test general fallback endpoint"
          },
          "response": []
        },
        {
          "name": "Gateway Fallback - Product Service",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/fallback/product",
              "host": ["{{gatewayUrl}}"],
              "path": ["fallback", "product"]
            },
            "description": "Test product service fallback"
          },
          "response": []
        },
        {
          "name": "Gateway Fallback - Order Service",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/fallback/order",
              "host": ["{{gatewayUrl}}"],
              "path": ["fallback", "order"]
            },
            "description": "Test order service fallback"
          },
          "response": []
        },
        {
          "name": "Gateway Fallback - Inventory Service",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/fallback/inventory",
              "host": ["{{gatewayUrl}}"],
              "path": ["fallback", "inventory"]
            },
            "description": "Test inventory service fallback"
          },
          "response": []
        },
        {
          "name": "Product Service Health via Gateway",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/health/product",
              "host": ["{{gatewayUrl}}"],
              "path": ["health", "product"]
            },
            "description": "Check product service health via gateway routing"
          },
          "response": []
        },
        {
          "name": "Order Service Health via Gateway",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/health/order",
              "host": ["{{gatewayUrl}}"],
              "path": ["health", "order"]
            },
            "description": "Check order service health via gateway routing"
          },
          "response": []
        },
        {
          "name": "Inventory Service Health via Gateway",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/health/inventory",
              "host": ["{{gatewayUrl}}"],
              "path": ["health", "inventory"]
            },
            "description": "Check inventory service health via gateway routing"
          },
          "response": []
        },
        {
          "name": "Notification Service Health via Gateway",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/health/notification",
              "host": ["{{gatewayUrl}}"],
              "path": ["health", "notification"]
            },
            "description": "Check notification service health via gateway routing"
          },
          "response": []
        },
        {
          "name": "Gateway Fallback - Rate Limit",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/fallback/rate-limit",
              "host": ["{{gatewayUrl}}"],
              "path": ["fallback", "rate-limit"]
            },
            "description": "Test rate limit fallback endpoint"
          },
          "response": []
        },
        {
          "name": "View Circuit Breaker Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/actuator/circuitbreakers",
              "host": ["{{gatewayUrl}}"],
              "path": ["actuator", "circuitbreakers"]
            },
            "description": "View circuit breaker status and metrics"
          },
          "response": []
        },
        {
          "name": "View Gateway Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/actuator/metrics",
              "host": ["{{gatewayUrl}}"],
              "path": ["actuator", "metrics"]
            },
            "description": "View gateway metrics including rate limiting"
          },
          "response": []
        }
      ]
    },
    {
      "name": "[DISABLED] Security Testing Scenarios",
      "description": "Security testing is currently disabled",
      "item": [
        {
          "name": "Access Protected Endpoint Without Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Attempt to access protected endpoint without authentication token - should return 401 Unauthorized"
          },
          "response": []
        },
        {
          "name": "Access Protected Endpoint With Invalid Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid.token.here",
                "description": "Invalid JWT token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Attempt to access protected endpoint with invalid token - should return 401 Unauthorized"
          },
          "response": []
        },
        {
          "name": "Access with User Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "User JWT token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Access protected endpoint with regular user token"
          },
          "response": []
        },
        {
          "name": "Access with Admin Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "description": "Admin JWT token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Access protected endpoint with admin token"
          },
          "response": []
        },
        {
          "name": "Token Refresh Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "    if (!pm.response) {",
                  "        console.log(\"Error: pm.response is undefined\");",
                  "        return;",
                  "    }",
                  "    if (pm.response.code === 200) {",
                  "        try {",
                  "            var jsonData = pm.response.json();",
                  "            if (jsonData \u0026\u0026 jsonData.token) {",
                  "                pm.environment.set(\"refreshed_token\", jsonData.token);",
                  "                console.log(\"Token refreshed and saved\");",
                  "            } else if (jsonData \u0026\u0026 jsonData.accessToken) {",
                  "                pm.environment.set(\"refreshed_token\", jsonData.accessToken);",
                  "                console.log(\"Token refreshed and saved from accessToken\");",
                  "            } else {",
                  "                console.log(\"Token not found in response. Response body: \" + JSON.stringify(jsonData));",
                  "            }",
                  "        } catch (jsonError) {",
                  "            console.log(\"Error parsing JSON: \" + jsonError.message);",
                  "            console.log(\"Response text: \" + (pm.response.text() || \u0027No response text\u0027));",
                  "        }",
                  "    } else {",
                  "        console.log(\"Non-200 response received: \" + pm.response.code);",
                  "        console.log(\"Response body: \" + (pm.response.text() || \u0027No response text\u0027));",
                  "    }",
                  "} catch (error) {",
                  "    console.log(\"Error in test script: \" + error.message);",
                  "    if (pm.response) {",
                  "        console.log(\"Response body: \" + (pm.response.text() || \u0027No response text\u0027));",
                  "    } else {",
                  "        console.log(\"pm.response is undefined\");",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "Current JWT token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/auth/refresh-token",
              "host": ["{{gatewayUrl}}"],
              "path": ["auth", "refresh-token"]
            },
            "description": "Test token refresh functionality (if implemented)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "‚ö° Rate Limiting Tests",
      "description": "Test rate limiting functionality across different services",
      "item": [
        {
          "name": "Rate Limit - Product Service (10 requests)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "rate-test-user-1",
                "description": "User ID for rate limiting"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Test rate limiting on product service - Run this multiple times quickly to trigger rate limit (10 req/sec limit)"
          },
          "response": []
        },
        {
          "name": "Rate Limit - Order Service (5 requests)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "rate-test-user-2",
                "description": "User ID for rate limiting"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/orders/customer/TestCustomer",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "customer", "TestCustomer"]
            },
            "description": "Test rate limiting on order service - Run this multiple times quickly to trigger rate limit (5 req/sec limit)"
          },
          "response": []
        },
        {
          "name": "Rate Limit - Inventory Service (15 requests)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "rate-test-user-3",
                "description": "User ID for rate limiting"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/inventory?skuCodes=IPHONE14PRO-256-BLACK",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "skuCodes",
                  "value": "IPHONE14PRO-256-BLACK"
                }
              ]
            },
            "description": "Test rate limiting on inventory service - Run this multiple times quickly to trigger rate limit (15 req/sec limit)"
          },
          "response": []
        },
        {
          "name": "Burst Rate Test - Multiple SKUs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "burst-test-user",
                "description": "User ID for burst testing"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/inventory?skuCodes=IPHONE14PRO-256-BLACK,APPLE-WATCH8-45MM-GPS,NIKE-AIRMAX270-BW-10",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "skuCodes",
                  "value": "IPHONE14PRO-256-BLACK,APPLE-WATCH8-45MM-GPS,NIKE-AIRMAX270-BW-10"
                }
              ]
            },
            "description": "Test burst capacity - should allow up to 30 requests in burst for inventory service"
          },
          "response": []
        },
        {
          "name": "Different User Rate Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "different-user-{{$randomInt}}",
                "description": "Different user ID to test separate rate limits"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Test with different user ID - should have separate rate limit bucket"
          },
          "response": []
        },
        {
          "name": "IP-based Rate Limit Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Test IP-based rate limiting (no X-User-ID header)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîß Circuit Breaker Tests",
      "description": "Test circuit breaker functionality and fallback mechanisms",
      "item": [
        {
          "name": "Force Circuit Breaker - Invalid Product",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/products/999999999",
              "host": ["{{gatewayUrl}}"],
              "path": ["products", "999999999"]
            },
            "description": "Trigger circuit breaker by calling non-existent product repeatedly"
          },
          "response": []
        },
        {
          "name": "Force Circuit Breaker - Invalid Order",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/orders/INVALID-ORDER-999999",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "INVALID-ORDER-999999"]
            },
            "description": "Trigger circuit breaker by calling non-existent order repeatedly"
          },
          "response": []
        },
        {
          "name": "Circuit Breaker Status Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/actuator/circuitbreakers",
              "host": ["{{gatewayUrl}}"],
              "path": ["actuator", "circuitbreakers"]
            },
            "description": "Check circuit breaker status and metrics"
          },
          "response": []
        },
        {
          "name": "Circuit Breaker Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/actuator/circuitbreakerevents",
              "host": ["{{gatewayUrl}}"],
              "path": ["actuator", "circuitbreakerevents"]
            },
            "description": "View circuit breaker events and state transitions"
          },
          "response": []
        },
        {
          "name": "Test Product Fallback",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/fallback/product",
              "host": ["{{gatewayUrl}}"],
              "path": ["fallback", "product"]
            },
            "description": "Direct test of product service fallback"
          },
          "response": []
        },
        {
          "name": "Test Order Fallback",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/fallback/order",
              "host": ["{{gatewayUrl}}"],
              "path": ["fallback", "order"]
            },
            "description": "Direct test of order service fallback"
          },
          "response": []
        },
        {
          "name": "Test Inventory Fallback",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/fallback/inventory",
              "host": ["{{gatewayUrl}}"],
              "path": ["fallback", "inventory"]
            },
            "description": "Direct test of inventory service fallback"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîÑ Resilience \u0026 Load Testing",
      "description": "Comprehensive resilience and load testing scenarios",
      "item": [
        {
          "name": "Load Test - Product Creation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "load-test-user-{{$randomInt}}",
                "description": "Random user for load testing"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Load Test Product {{$randomInt}}\",\n  \"description\": \"Product created during load testing\",\n  \"price\": {{$randomPrice}},\n  \"category\": \"Load Test\",\n  \"skuCode\": \"LOAD-TEST-{{$randomInt}}\",\n  \"stockQuantity\": {{$randomInt}},\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Create products under load to test rate limiting and circuit breaker"
          },
          "response": []
        },
        {
          "name": "Load Test - Order Creation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "order-load-user-{{$randomInt}}",
                "description": "Random user for order load testing"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerName\": \"Load Test Customer {{$randomInt}}\",\n  \"status\": \"PENDING\",\n  \"products\": [\n    {\n      \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n      \"quantity\": 1,\n      \"price\": 1099.99\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/orders",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders"]
            },
            "description": "Create orders under load to test rate limiting"
          },
          "response": []
        },
        {
          "name": "Load Test - Inventory Check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "inventory-load-user-{{$randomInt}}",
                "description": "Random user for inventory load testing"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/inventory?skuCodes=IPHONE14PRO-256-BLACK",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "skuCodes",
                  "value": "IPHONE14PRO-256-BLACK"
                }
              ]
            },
            "description": "Check inventory under load to test rate limiting"
          },
          "response": []
        },
        {
          "name": "Stress Test - High Volume Requests",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "stress-test-user",
                "description": "Stress test user"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "High volume requests to trigger rate limiting - run multiple times rapidly"
          },
          "response": []
        },
        {
          "name": "Test Rate Limit Headers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "header-test-user",
                "description": "Test rate limit headers"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Test to check rate limit headers in response"
          },
          "response": []
        },
        {
          "name": "Recovery Test - After Rate Limit",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "recovery-test-user",
                "description": "Test recovery after rate limit"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Test recovery after hitting rate limit - wait 60 seconds before running"
          },
          "response": []
        }
      ]
    },
    {
      "name": "ÔøΩ User Service APIs",
      "description": "User profile management endpoints",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/users/profile",
              "host": ["{{gatewayUrl}}"],
              "path": ["users", "profile"]
            },
            "description": "Get the current user's profile"
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"updated_email@example.com\",\n  \"phone\": \"555-123-4567\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"zipCode\": \"12345\",\n    \"country\": \"USA\"\n  }\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/users/profile",
              "host": ["{{gatewayUrl}}"],
              "path": ["users", "profile"]
            },
            "description": "Update the current user's profile"
          },
          "response": []
        },
        {
          "name": "List All Users (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/users",
              "host": ["{{gatewayUrl}}"],
              "path": ["users"]
            },
            "description": "List all users (Admin only)"
          },
          "response": []
        },
        {
          "name": "Get User by ID (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/users/1",
              "host": ["{{gatewayUrl}}"],
              "path": ["users", "1"]
            },
            "description": "Get a specific user by ID (Admin only)"
          },
          "response": []
        },
        {
          "name": "Delete User (Admin)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/users/1",
              "host": ["{{gatewayUrl}}"],
              "path": ["users", "1"]
            },
            "description": "Delete a user (Admin only)"
          },
          "response": []
        },
        {
          "name": "User Service Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/users/actuator/health",
              "host": ["{{gatewayUrl}}"],
              "path": ["users", "actuator", "health"]
            },
            "description": "Check if User Service is running and healthy"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîÑ End-to-End Workflow Tests",
      "description": "Complete end-to-end testing scenarios",
      "item": [
        {
          "name": "Complete Purchase Flow",
          "description": "A complete purchase flow from login to order confirmation",
          "item": [
            {
              "name": "1. User Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "if (jsonData && jsonData.token) {",
                      "    pm.environment.set('auth_token', jsonData.token);",
                      "    console.log('Token saved to environment');",
                      "} else {",
                      "    console.log('No token found in response');",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"john_doe\",\n  \"password\": \"test1234\"\n}"
                },
                "url": {
                  "raw": "{{gatewayUrl}}/auth/signin",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["auth", "signin"]
                }
              }
            },
            {
              "name": "2. Browse Products",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/products",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["products"]
                }
              }
            },
            {
              "name": "3. Check Product Stock",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/inventory/products/1",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["inventory", "products", "1"]
                }
              }
            },
            {
              "name": "4. Create Order",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "if (jsonData && jsonData.id) {",
                      "    pm.environment.set('order_id', jsonData.id);",
                      "    console.log('Order ID saved to environment');",
                      "} else {",
                      "    console.log('No order ID found in response');",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userId\": 1,\n  \"items\": [\n    {\n      \"productId\": 1,\n      \"quantity\": 2\n    },\n    {\n      \"productId\": 2,\n      \"quantity\": 1\n    }\n  ],\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"zipCode\": \"12345\",\n    \"country\": \"USA\"\n  },\n  \"paymentMethod\": \"CREDIT_CARD\"\n}"
                },
                "url": {
                  "raw": "{{gatewayUrl}}/orders",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["orders"]
                }
              }
            },
            {
              "name": "5. Check Order Status",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/orders/{{order_id}}",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["orders", "{{order_id}}"]
                }
              }
            },
            {
              "name": "6. Check Notifications",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/notifications/user/1",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["notifications", "user", "1"]
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ÔøΩüõçÔ∏è Product Service APIs - Via Gateway",
      "description": "Product management endpoints accessed through Gateway Service",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT authentication token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Fetch all products via gateway"
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT authentication token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/products/{{productId}}",
              "host": ["{{gatewayUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "description": "Fetch specific product by ID via gateway"
          },
          "response": []
        },
        {
          "name": "Create New Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT authentication token"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"New iPhone 15 Pro\",\n  \"description\": \"Latest iPhone with advanced features\",\n  \"price\": 1199.99,\n  \"category\": \"Electronics\",\n  \"skuCode\": \"IPHONE15PRO-128-NATURAL\",\n  \"stockQuantity\": 50,\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Create a new product via gateway"
          },
          "response": []
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated iPhone 15 Pro\",\n  \"description\": \"Updated description for iPhone\",\n  \"price\": 1099.99,\n  \"category\": \"Electronics\",\n  \"skuCode\": \"IPHONE15PRO-128-NATURAL\",\n  \"stockQuantity\": 75,\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/products/{{productId}}",
              "host": ["{{gatewayUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "description": "Update existing product via gateway"
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/products/{{productId}}",
              "host": ["{{gatewayUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "description": "Delete product by ID via gateway"
          },
          "response": []
        },
        {
          "name": "Search Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/products/search?name=iPhone\u0026category=Electronics\u0026minPrice=500\u0026maxPrice=2000\u0026isActive=true",
              "host": ["{{gatewayUrl}}"],
              "path": ["products", "search"],
              "query": [
                {
                  "key": "name",
                  "value": "iPhone",
                  "description": "Search by product name"
                },
                {
                  "key": "category",
                  "value": "Electronics",
                  "description": "Filter by category"
                },
                {
                  "key": "minPrice",
                  "value": "500",
                  "description": "Minimum price filter"
                },
                {
                  "key": "maxPrice",
                  "value": "2000",
                  "description": "Maximum price filter"
                },
                {
                  "key": "isActive",
                  "value": "true",
                  "description": "Filter by active status"
                }
              ]
            },
            "description": "Search products with multiple filters via gateway"
          },
          "response": []
        },
        {
          "name": "Clear Product Cache",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/products/clear-cache",
              "host": ["{{gatewayUrl}}"],
              "path": ["products", "clear-cache"]
            },
            "description": "Clear product cache via gateway"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üì¶ Order Service APIs - Via Gateway",
      "description": "Order management endpoints accessed through Gateway Service",
      "item": [
        {
          "name": "Get Orders by Customer",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT authentication token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/orders/customer/{{customerName}}",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "customer", "{{customerName}}"]
            },
            "description": "Get all orders for a specific customer via gateway"
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT authentication token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/orders/{{orderNumber}}",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "{{orderNumber}}"]
            },
            "description": "Get specific order by order number via gateway"
          },
          "response": []
        },
        {
          "name": "Create New Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "    if (pm.response.code === 202) {",
                  "        var jsonData = pm.response.json();",
                  "        if (jsonData \u0026\u0026 jsonData.orderNumber) {",
                  "            pm.environment.set(\"async_order_number\", jsonData.orderNumber);",
                  "            console.log(\"Async Order Number saved: \" + jsonData.orderNumber);",
                  "            ",
                  "            // Add a small delay to give time for the order processing to start",
                  "            setTimeout(function() {",
                  "                console.log(\"Continuing after delay\");",
                  "            }, 1000);",
                  "        } else {",
                  "            console.log(\"Order number not found in response\");",
                  "        }",
                  "    } else {",
                  "        console.log(\"Unexpected response code: \" + pm.response.code);",
                  "    }",
                  "} catch(e) {",
                  "    console.log(\"Error in test script: \" + e.message);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerName\": \"{{customerName}}\",\n  \"products\": [\n    {\n      \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n      \"quantity\": 1,\n      \"price\": 1099.99\n    },\n    {\n      \"skuCode\": \"APPLE-WATCH8-45MM-GPS\",\n      \"quantity\": 1,\n      \"price\": 399.99\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/orders",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders"]
            },
            "description": "Create new order with automatic inventory validation via gateway - now processes asynchronously and returns 202 Accepted status with a pending order reference"
          },
          "response": []
        },
        {
          "name": "Check Async Order Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "    // Log the response status",
                  "    console.log(\"Response Status: \" + pm.response.code);",
                  "    ",
                  "    // Check if we have a successful response",
                  "    if (pm.response.code === 200) {",
                  "        var jsonData = pm.response.json();",
                  "        console.log(\"Order Status: \" + jsonData.status);",
                  "        ",
                  "        // Test assertions",
                  "        pm.test(\"Order should be processed\", function() {",
                  "            pm.expect(jsonData.status).to.be.oneOf([\"COMPLETED\", \"PROCESSING\", \"PENDING\", \"FAILED\"]);",
                  "        });",
                  "        ",
                  "        // Set status in environment for later tests",
                  "        if (jsonData.status) {",
                  "            pm.environment.set(\"async_order_status\", jsonData.status);",
                  "        }",
                  "    } else if (pm.response.code === 404) {",
                  "        console.log(\"Order not found yet - still processing\");",
                  "    }",
                  "} catch(e) {",
                  "    console.log(\"Error in test script: \" + e.message);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/orders/{{async_order_number}}",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "{{async_order_number}}"]
            },
            "description": "Check the status of an asynchronously created order"
          },
          "response": []
        },
        {
          "name": "Update Order Status",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/orders/{{orderNumber}}?status=COMPLETED",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "{{orderNumber}}"],
              "query": [
                {
                  "key": "status",
                  "value": "COMPLETED",
                  "description": "New order status (PENDING, COMPLETED, CANCELLED)"
                }
              ]
            },
            "description": "Update order status via gateway"
          },
          "response": []
        },
        {
          "name": "Cancel Order",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/orders/{{orderNumber}}?status=CANCELLED",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "{{orderNumber}}"],
              "query": [
                {
                  "key": "status",
                  "value": "CANCELLED"
                }
              ]
            },
            "description": "Cancel order via gateway"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìã Inventory Service APIs - Via Gateway",
      "description": "Inventory management endpoints accessed through Gateway Service",
      "item": [
        {
          "name": "Check Stock - Single SKU",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT authentication token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/inventory?skuCodes=IPHONE14PRO-256-BLACK",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "skuCodes",
                  "value": "IPHONE14PRO-256-BLACK",
                  "description": "Single SKU to check"
                }
              ]
            },
            "description": "Check stock for single SKU via gateway"
          },
          "response": []
        },
        {
          "name": "Check Stock - Multiple SKUs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/inventory?skuCodes=IPHONE14PRO-256-BLACK,APPLE-WATCH8-45MM-GPS,NIKE-AIRMAX270-BW-10",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "skuCodes",
                  "value": "IPHONE14PRO-256-BLACK,APPLE-WATCH8-45MM-GPS,NIKE-AIRMAX270-BW-10",
                  "description": "Multiple SKUs to check"
                }
              ]
            },
            "description": "Check stock for multiple SKUs via gateway"
          },
          "response": []
        },
        {
          "name": "Update Inventory - Single Item",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n    \"quantity\": 100,\n    \"isInStock\": true\n  }\n]"
            },
            "url": {
              "raw": "{{gatewayUrl}}/inventory",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"]
            },
            "description": "Update inventory for single item via gateway"
          },
          "response": []
        },
        {
          "name": "Update Inventory - Bulk",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n    \"quantity\": 50,\n    \"isInStock\": true\n  },\n  {\n    \"skuCode\": \"APPLE-WATCH8-45MM-GPS\",\n    \"quantity\": 75,\n    \"isInStock\": true\n  },\n  {\n    \"skuCode\": \"NIKE-AIRMAX270-BW-10\",\n    \"quantity\": 30,\n    \"isInStock\": true\n  }\n]"
            },
            "url": {
              "raw": "{{gatewayUrl}}/inventory",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"]
            },
            "description": "Bulk update inventory for multiple items via gateway"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üõçÔ∏è Product Service APIs - Direct",
      "description": "Product management endpoints with direct service access (Development/Debug)",
      "item": [
        {
          "name": "Get All Products (Direct)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{productServiceUrl}}/products",
              "host": ["{{productServiceUrl}}"],
              "path": ["products"]
            },
            "description": "Fetch all products directly from product service"
          },
          "response": []
        },
        {
          "name": "Get Product by ID (Direct)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{productServiceUrl}}/products/{{productId}}",
              "host": ["{{productServiceUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "description": "Fetch specific product by ID directly"
          },
          "response": []
        },
        {
          "name": "Create New Product (Direct)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Direct Access Product\",\n  \"description\": \"Product created via direct service call\",\n  \"price\": 299.99,\n  \"category\": \"Test\",\n  \"skuCode\": \"DIRECT-TEST-001\",\n  \"stockQuantity\": 25,\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{productServiceUrl}}/products",
              "host": ["{{productServiceUrl}}"],
              "path": ["products"]
            },
            "description": "Create a new product directly"
          },
          "response": []
        },
        {
          "name": "Search Products (Direct)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{productServiceUrl}}/products/search?name=Test\u0026isActive=true",
              "host": ["{{productServiceUrl}}"],
              "path": ["products", "search"],
              "query": [
                {
                  "key": "name",
                  "value": "Test"
                },
                {
                  "key": "isActive",
                  "value": "true"
                }
              ]
            },
            "description": "Search products directly"
          },
          "response": []
        },
        {
          "name": "Product Service Health (Direct)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{productServiceUrl}}/actuator/health",
              "host": ["{{productServiceUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Check product service health directly"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üì¶ Order Service APIs - Direct",
      "description": "Order management endpoints with direct service access (Development/Debug)",
      "item": [
        {
          "name": "Get Orders by Customer (Direct)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{orderServiceUrl}}/orders/customer/{{customerName}}",
              "host": ["{{orderServiceUrl}}"],
              "path": ["orders", "customer", "{{customerName}}"]
            },
            "description": "Get customer orders directly from order service"
          },
          "response": []
        },
        {
          "name": "Create New Order (Direct)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerName\": \"Direct Test Customer\",\n  \"status\": \"PENDING\",\n  \"products\": [\n    {\n      \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n      \"quantity\": 1,\n      \"price\": 1099.99\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{orderServiceUrl}}/orders",
              "host": ["{{orderServiceUrl}}"],
              "path": ["orders"]
            },
            "description": "Create order directly (bypasses gateway)"
          },
          "response": []
        },
        {
          "name": "Order Service Health (Direct)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{orderServiceUrl}}/actuator/health",
              "host": ["{{orderServiceUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Check order service health directly"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìã Inventory Service APIs - Direct",
      "description": "Inventory management endpoints with direct service access (Development/Debug)",
      "item": [
        {
          "name": "Check Stock (Direct)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{inventoryServiceUrl}}/inventory?skuCodes=IPHONE14PRO-256-BLACK",
              "host": ["{{inventoryServiceUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "skuCodes",
                  "value": "IPHONE14PRO-256-BLACK"
                }
              ]
            },
            "description": "Check stock directly from inventory service"
          },
          "response": []
        },
        {
          "name": "Update Inventory (Direct)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n    \"quantity\": 200,\n    \"isInStock\": true\n  }\n]"
            },
            "url": {
              "raw": "{{inventoryServiceUrl}}/inventory",
              "host": ["{{inventoryServiceUrl}}"],
              "path": ["inventory"]
            },
            "description": "Update inventory directly"
          },
          "response": []
        },
        {
          "name": "Inventory Service Health (Direct)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{inventoryServiceUrl}}/actuator/health",
              "host": ["{{inventoryServiceUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Check inventory service health directly"
          },
          "response": []
        }
      ]
    },
    {
      "name": "‚è±Ô∏è Async Order Flow Testing",
      "description": "Test the asynchronous order creation workflow",
      "item": [
        {
          "name": "1. Create Async Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "    // Check if we have a 202 Accepted response",
                  "    pm.test(\"Response status is 202 Accepted\", function() {",
                  "        pm.response.to.have.status(202);",
                  "    });",
                  "    ",
                  "    // Save order number for subsequent requests",
                  "    if (pm.response.code === 202) {",
                  "        var jsonData = pm.response.json();",
                  "        if (jsonData \u0026\u0026 jsonData.orderNumber) {",
                  "            pm.environment.set(\"async_order_number\", jsonData.orderNumber);",
                  "            console.log(\"Async Order Number saved: \" + jsonData.orderNumber);",
                  "            ",
                  "            // Save pending status",
                  "            pm.environment.set(\"async_order_status\", jsonData.status || \"PENDING\");",
                  "        } else {",
                  "            console.log(\"Order number not found in response\");",
                  "        }",
                  "    }",
                  "} catch(e) {",
                  "    console.log(\"Error in test script: \" + e.message);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT authentication token"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerName\": \"Async Test Customer\",\n  \"products\": [\n    {\n      \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n      \"quantity\": 1,\n      \"price\": 1099.99\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/orders",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders"]
            },
            "description": "Create a new order asynchronously"
          },
          "response": []
        },
        {
          "name": "2. Check Order Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "    // Allow both 200 (order found) and 404 (still processing)",
                  "    pm.test(\"Response should be 200 or 404\", function() {",
                  "        pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "    });",
                  "    ",
                  "    // If order is found, save its status",
                  "    if (pm.response.code === 200) {",
                  "        var jsonData = pm.response.json();",
                  "        pm.environment.set(\"async_order_status\", jsonData.status || \"UNKNOWN\");",
                  "        console.log(\"Order status: \" + jsonData.status);",
                  "        ",
                  "        // Test order status",
                  "        pm.test(\"Order should have a valid status\", function() {",
                  "            pm.expect(jsonData.status).to.be.oneOf([",
                  "                \"PENDING\", \"PROCESSING\", \"COMPLETED\", \"FAILED\"",
                  "            ]);",
                  "        });",
                  "    } else {",
                  "        console.log(\"Order not yet available - still processing asynchronously\");",
                  "    }",
                  "} catch(e) {",
                  "    console.log(\"Error in test script: \" + e.message);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT authentication token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/orders/{{async_order_number}}",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "{{async_order_number}}"]
            },
            "description": "Check the status of the asynchronously created order"
          },
          "response": []
        },
        {
          "name": "3. Poll Order Status (Completion)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "    if (pm.response.code === 200) {",
                  "        var jsonData = pm.response.json();",
                  "        console.log(\"Order status: \" + jsonData.status);",
                  "        ",
                  "        // Update environment variable",
                  "        pm.environment.set(\"async_order_status\", jsonData.status || \"UNKNOWN\");",
                  "        ",
                  "        // Verify order is completed or failed (terminal state)",
                  "        pm.test(\"Order should be in terminal state\", function() {",
                  "            pm.expect(jsonData.status).to.be.oneOf([\"COMPLETED\", \"FAILED\"]);",
                  "        });",
                  "    } else {",
                  "        console.log(\"Order not found or other error\");",
                  "    }",
                  "} catch(e) {",
                  "    console.log(\"Error in test script: \" + e.message);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT authentication token"
              }
            ],
            "url": {
              "raw": "{{gatewayUrl}}/orders/{{async_order_number}}",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "{{async_order_number}}"]
            },
            "description": "Poll the order status until it reaches a terminal state (COMPLETED or FAILED)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîÑ End-to-End Integration Tests",
      "description": "Complete workflow testing scenarios",
      "item": [
        {
          "name": "1. Setup Initial Inventory",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n    \"quantity\": 100,\n    \"isInStock\": true\n  },\n  {\n    \"skuCode\": \"APPLE-WATCH8-45MM-GPS\",\n    \"quantity\": 50,\n    \"isInStock\": true\n  },\n  {\n    \"skuCode\": \"NIKE-AIRMAX270-BW-10\",\n    \"quantity\": 75,\n    \"isInStock\": true\n  }\n]"
            },
            "url": {
              "raw": "{{gatewayUrl}}/inventory",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"]
            },
            "description": "Setup initial inventory levels for testing"
          },
          "response": []
        },
        {
          "name": "2. Create Test Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Integration Test Product\",\n  \"description\": \"Product for end-to-end testing\",\n  \"price\": 599.99,\n  \"category\": \"Test Category\",\n  \"skuCode\": \"INTEGRATION-TEST-001\",\n  \"stockQuantity\": 10,\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/products",
              "host": ["{{gatewayUrl}}"],
              "path": ["products"]
            },
            "description": "Create a test product for integration testing"
          },
          "response": []
        },
        {
          "name": "3. Verify Product Created",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/products/search?name=Integration Test",
              "host": ["{{gatewayUrl}}"],
              "path": ["products", "search"],
              "query": [
                {
                  "key": "name",
                  "value": "Integration Test"
                }
              ]
            },
            "description": "Verify the test product was created successfully"
          },
          "response": []
        },
        {
          "name": "4. Check Stock Before Order",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/inventory?skuCodes=IPHONE14PRO-256-BLACK,APPLE-WATCH8-45MM-GPS",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "skuCodes",
                  "value": "IPHONE14PRO-256-BLACK,APPLE-WATCH8-45MM-GPS"
                }
              ]
            },
            "description": "Check inventory levels before creating order"
          },
          "response": []
        },
        {
          "name": "5. Create Integration Test Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerName\": \"Integration Test Customer\",\n  \"status\": \"PENDING\",\n  \"products\": [\n    {\n      \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n      \"quantity\": 2,\n      \"price\": 1099.99\n    },\n    {\n      \"skuCode\": \"APPLE-WATCH8-45MM-GPS\",\n      \"quantity\": 1,\n      \"price\": 399.99\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/orders",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders"]
            },
            "description": "Create order that will automatically validate and update inventory"
          },
          "response": []
        },
        {
          "name": "6. Verify Stock After Order",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/inventory?skuCodes=IPHONE14PRO-256-BLACK,APPLE-WATCH8-45MM-GPS",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "skuCodes",
                  "value": "IPHONE14PRO-256-BLACK,APPLE-WATCH8-45MM-GPS"
                }
              ]
            },
            "description": "Verify inventory was automatically updated after order creation"
          },
          "response": []
        },
        {
          "name": "7. Get Customer Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/orders/customer/Integration Test Customer",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "customer", "Integration Test Customer"]
            },
            "description": "Retrieve all orders for the test customer"
          },
          "response": []
        },
        {
          "name": "8. Complete Order",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/orders/{{lastOrderNumber}}?status=COMPLETED",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "{{lastOrderNumber}}"],
              "query": [
                {
                  "key": "status",
                  "value": "COMPLETED"
                }
              ]
            },
            "description": "Mark the order as completed"
          },
          "response": []
        }
      ]
    },
    {
      "name": "‚ùå Error Handling \u0026 Circuit Breaker Tests",
      "description": "Test error scenarios and fallback mechanisms",
      "item": [
        {
          "name": "Test Invalid Product ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/products/99999",
              "host": ["{{gatewayUrl}}"],
              "path": ["products", "99999"]
            },
            "description": "Test handling of non-existent product ID"
          },
          "response": []
        },
        {
          "name": "Test Invalid Customer Name",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/orders/customer/NonExistentCustomer123",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "customer", "NonExistentCustomer123"]
            },
            "description": "Test handling of non-existent customer"
          },
          "response": []
        },
        {
          "name": "Test Invalid SKU Code",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/inventory?skuCodes=INVALID-SKU-CODE",
              "host": ["{{gatewayUrl}}"],
              "path": ["inventory"],
              "query": [
                {
                  "key": "skuCodes",
                  "value": "INVALID-SKU-CODE"
                }
              ]
            },
            "description": "Test handling of invalid SKU codes"
          },
          "response": []
        },
        {
          "name": "Test Order with Insufficient Stock",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerName\": \"Test Customer\",\n  \"status\": \"PENDING\",\n  \"products\": [\n    {\n      \"skuCode\": \"IPHONE14PRO-256-BLACK\",\n      \"quantity\": 1000,\n      \"price\": 1099.99\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{gatewayUrl}}/orders",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders"]
            },
            "description": "Test order creation with quantity exceeding stock"
          },
          "response": []
        },
        {
          "name": "Test Invalid Order Status Update",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{gatewayUrl}}/orders/INVALID-ORDER-123?status=INVALID_STATUS",
              "host": ["{{gatewayUrl}}"],
              "path": ["orders", "INVALID-ORDER-123"],
              "query": [
                {
                  "key": "status",
                  "value": "INVALID_STATUS"
                }
              ]
            },
            "description": "Test updating order with invalid status"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîê OAuth2 Security Testing",
      "description": "Tests for validating Spring OAuth2 implementation for both direct service access and through the gateway",
      "item": [
        {
          "name": "1Ô∏è‚É£ User Management",
          "description": "User registration and management",
          "item": [
            {
              "name": "Register New User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"testuser2\",\n    \"email\": \"testuser2@example.com\",\n    \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{authUrl}}/register",
                  "host": ["{{authUrl}}"],
                  "path": ["register"]
                },
                "description": "Register a new user account"
              },
              "response": []
            },
            {
              "name": "Login User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "if (jsonData && jsonData.token) {",
                      "    pm.environment.set(\"auth_token\", jsonData.token);",
                      "    console.log(\"Token saved to environment\");",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"testuser2\",\n    \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{authUrl}}/signin",
                  "host": ["{{authUrl}}"],
                  "path": ["signin"]
                },
                "description": "Login with username and password to get JWT token"
              },
              "response": []
            },
            {
              "name": "Refresh Token",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"refreshToken\": \"your-refresh-token-here\"\n}"
                },
                "url": {
                  "raw": "{{authUrl}}/refresh",
                  "host": ["{{authUrl}}"],
                  "path": ["refresh"]
                },
                "description": "Get a new access token using a refresh token"
              },
              "response": []
            },
            {
              "name": "Logout User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{authUrl}}/logout",
                  "host": ["{{authUrl}}"],
                  "path": ["logout"]
                },
                "description": "Logout the current user and invalidate their session"
              },
              "response": []
            }
          ]
        },
        {
          "name": "2Ô∏è‚É£ Authorization Code Flow",
          "description": "Authorization Code Flow for web applications",
          "item": [
            {
              "name": "Get OAuth2 Authorization Code",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{authUrl}}/oauth2/authorize?response_type=code\u0026client_id=web-client\u0026scope=openid read write\u0026redirect_uri=http://localhost:8080/login/oauth2/code/web-client-oidc",
                  "host": ["{{authUrl}}"],
                  "path": ["oauth2", "authorize"],
                  "query": [
                    {
                      "key": "response_type",
                      "value": "code"
                    },
                    {
                      "key": "client_id",
                      "value": "web-client"
                    },
                    {
                      "key": "scope",
                      "value": "openid read write"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "http://localhost:8080/login/oauth2/code/web-client-oidc"
                    },
                    {
                      "key": "state",
                      "value": "random_state_123",
                      "disabled": true
                    }
                  ]
                },
                "description": "Start the authorization code flow. This will redirect to a login page."
              },
              "response": []
            },
            {
              "name": "Exchange Code for Token",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Authorization",
                    "value": "Basic {{base64_client_credentials}}",
                    "description": "Base64 encoded client_id:client_secret"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "code",
                      "value": "PASTE_AUTHORIZATION_CODE_HERE",
                      "description": "The code received from the previous step",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "http://localhost:8080/login/oauth2/code/web-client-oidc",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{authUrl}}/oauth2/token",
                  "host": ["{{authUrl}}"],
                  "path": ["oauth2", "token"]
                },
                "description": "Exchange the authorization code for an access token"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "if (response.access_token) {",
                      "    pm.environment.set(\u0027access_token\u0027, response.access_token);",
                      "    if (response.refresh_token) {",
                      "        pm.environment.set(\u0027refresh_token\u0027, response.refresh_token);",
                      "    }",
                      "    console.log(\u0027Access token saved to environment\u0027);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "3Ô∏è‚É£ Client Credentials Flow",
          "description": "Client Credentials Flow for service-to-service communication",
          "item": [
            {
              "name": "Get Client Credentials Token",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Authorization",
                    "value": "Basic {{base64_client_credentials}}",
                    "description": "Base64 encoded client_id:client_secret"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "client_credentials",
                      "type": "text"
                    },
                    {
                      "key": "scope",
                      "value": "read write",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{authUrl}}/oauth2/token",
                  "host": ["{{authUrl}}"],
                  "path": ["oauth2", "token"]
                },
                "description": "Get an access token using the client credentials flow"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "if (response.access_token) {",
                      "    pm.environment.set(\u0027client_access_token\u0027, response.access_token);",
                      "    console.log(\u0027Client access token saved to environment\u0027);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "4Ô∏è‚É£ Token Management",
          "description": "Token refresh, introspection and revocation",
          "item": [
            {
              "name": "Get User Info",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{authUrl}}/userinfo",
                  "host": ["{{authUrl}}"],
                  "path": ["userinfo"]
                },
                "description": "Get information about the authenticated user (OIDC)"
              },
              "response": []
            },
            {
              "name": "Refresh Token",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Authorization",
                    "value": "Basic {{base64_client_credentials}}",
                    "description": "Base64 encoded client_id:client_secret"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "refresh_token",
                      "type": "text"
                    },
                    {
                      "key": "refresh_token",
                      "value": "{{refresh_token}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{authUrl}}/oauth2/token",
                  "host": ["{{authUrl}}"],
                  "path": ["oauth2", "token"]
                },
                "description": "Refresh an access token using the refresh token"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "if (response.access_token) {",
                      "    pm.environment.set(\u0027access_token\u0027, response.access_token);",
                      "    if (response.refresh_token) {",
                      "        pm.environment.set(\u0027refresh_token\u0027, response.refresh_token);",
                      "    }",
                      "    console.log(\u0027Access token refreshed and saved to environment\u0027);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Introspect Token",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Authorization",
                    "value": "Basic {{base64_client_credentials}}",
                    "description": "Base64 encoded client_id:client_secret"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{access_token}}",
                      "type": "text"
                    },
                    {
                      "key": "token_type_hint",
                      "value": "access_token",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{authUrl}}/oauth2/introspect",
                  "host": ["{{authUrl}}"],
                  "path": ["oauth2", "introspect"]
                },
                "description": "Check if a token is valid and get its details"
              },
              "response": []
            },
            {
              "name": "Revoke Token",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Authorization",
                    "value": "Basic {{base64_client_credentials}}",
                    "description": "Base64 encoded client_id:client_secret"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{access_token}}",
                      "type": "text"
                    },
                    {
                      "key": "token_type_hint",
                      "value": "access_token",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{authUrl}}/oauth2/revoke",
                  "host": ["{{authUrl}}"],
                  "path": ["oauth2", "revoke"]
                },
                "description": "Revoke an access token"
              },
              "response": []
            }
          ]
        },
        {
          "name": "5Ô∏è‚É£ Direct Service Security Tests",
          "description": "Test OAuth2 security directly with each service",
          "item": [
            {
              "name": "Auth Service - Public Endpoint",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{authUrl}}/public/test",
                  "host": ["{{authUrl}}"],
                  "path": ["public", "test"]
                },
                "description": "Access a public endpoint that doesn\u0027t require authentication"
              },
              "response": []
            },
            {
              "name": "Auth Service - Protected Endpoint",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{authUrl}}/api/user-info",
                  "host": ["{{authUrl}}"],
                  "path": ["api", "user-info"]
                },
                "description": "Access a protected endpoint that requires authentication"
              },
              "response": []
            },
            {
              "name": "Auth Service - Admin Endpoint",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{authUrl}}/admin/test",
                  "host": ["{{authUrl}}"],
                  "path": ["admin", "test"]
                },
                "description": "Access an admin-only endpoint"
              },
              "response": []
            },
            {
              "name": "Product Service - Direct Access",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{productServiceUrl}}/products",
                  "host": ["{{productServiceUrl}}"],
                  "path": ["products"]
                },
                "description": "Access the product service directly with a token"
              },
              "response": []
            },
            {
              "name": "Order Service - Direct Access",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{orderServiceUrl}}/orders",
                  "host": ["{{orderServiceUrl}}"],
                  "path": ["orders"]
                },
                "description": "Access the order service directly with a token"
              },
              "response": []
            },
            {
              "name": "Inventory Service - Direct Access",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{inventoryServiceUrl}}/inventory",
                  "host": ["{{inventoryServiceUrl}}"],
                  "path": ["inventory"]
                },
                "description": "Access the inventory service directly with a token"
              },
              "response": []
            }
          ]
        },
        {
          "name": "6Ô∏è‚É£ Gateway Security Tests",
          "description": "Test OAuth2 security through the gateway",
          "item": [
            {
              "name": "Gateway - Product Service",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/products",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["products"]
                },
                "description": "Access the product service through the gateway with an OAuth2 token"
              },
              "response": []
            },
            {
              "name": "Gateway - Order Service",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/orders",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["orders"]
                },
                "description": "Access the order service through the gateway with an OAuth2 token"
              },
              "response": []
            },
            {
              "name": "Gateway - Inventory Service",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/inventory",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["inventory"]
                },
                "description": "Access the inventory service through the gateway with an OAuth2 token"
              },
              "response": []
            },
            {
              "name": "Gateway - User With Admin Role Test",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/inventory",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["inventory"]
                },
                "description": "Test admin-only access through the gateway using a token with admin privileges"
              },
              "response": []
            }
          ]
        },
        {
          "name": "7Ô∏è‚É£ Security Edge Cases",
          "description": "Test security edge cases and error scenarios",
          "item": [
            {
              "name": "Invalid Token Test",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid_token_12345",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/products",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["products"]
                },
                "description": "Test behavior with an invalid token"
              },
              "response": []
            },
            {
              "name": "Expired Token Test",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{expired_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/products",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["products"]
                },
                "description": "Test behavior with an expired token"
              },
              "response": []
            },
            {
              "name": "Insufficient Scope Test",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_access_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{gatewayUrl}}/inventory",
                  "host": ["{{gatewayUrl}}"],
                  "path": ["inventory"]
                },
                "description": "Test access to admin endpoints with a token that has insufficient privileges"
              },
              "response": []
            }
          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// This script will run before every request in this collection",
              "if (!pm.environment.get(\u0027base64_client_credentials\u0027)) {",
              "    const clientId = \u0027web-client\u0027;",
              "    const clientSecret = \u0027secret\u0027;",
              "    const base64Credentials = btoa(clientId + \u0027:\u0027 + clientSecret);",
              "    pm.environment.set(\u0027base64_client_credentials\u0027, base64Credentials);",
              "    console.log(\u0027Client credentials encoded and saved to environment\u0027);",
              "}"
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic variables for testing",
          "pm.globals.set(\u0027timestamp\u0027, new Date().toISOString());",
          "pm.globals.set(\u0027currentDate\u0027, new Date().toISOString().split(\u0027T\u0027)[0]);",
          "pm.globals.set(\u0027randomCustomerSuffix\u0027, Math.floor(Math.random() * 10000));",
          "pm.globals.set(\u0027customerName\u0027, \u0027TestCustomer_\u0027 + pm.globals.get(\u0027randomCustomerSuffix\u0027));",
          "",
          "// Set default product ID if not exists",
          "if (!pm.globals.get(\u0027productId\u0027)) {",
          "    pm.globals.set(\u0027productId\u0027, \u00271\u0027);",
          "}",
          "",
          "// Set default order number if not exists",
          "if (!pm.globals.get(\u0027orderNumber\u0027)) {",
          "    pm.globals.set(\u0027orderNumber\u0027, \u0027ORDER-\u0027 + Date.now());",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test scripts for all requests",
          "pm.test(\u0027Response time is acceptable (\u003c5000ms)\u0027, function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test(\u0027Response should not contain server error (5xx)\u0027, function () {",
          "    pm.expect(pm.response.code).to.be.below(500);",
          "});",
          "",
          "// Extract and set variables from response",
          "if (pm.response.code === 201 \u0026\u0026 pm.request.name.includes(\u0027Create\u0027)) {",
          "    try {",
          "        const responseJson = pm.response.json();",
          "        ",
          "        // Save order number from order creation",
          "        if (responseJson.orderNumber) {",
          "            pm.globals.set(\u0027lastOrderNumber\u0027, responseJson.orderNumber);",
          "            console.log(\u0027Saved order number:\u0027, responseJson.orderNumber);",
          "        }",
          "        ",
          "        // Save product ID from product creation",
          "        if (responseJson.id) {",
          "            pm.globals.set(\u0027lastProductId\u0027, responseJson.id);",
          "            console.log(\u0027Saved product ID:\u0027, responseJson.id);",
          "        }",
          "    } catch (e) {",
          "        console.log(\u0027Response is not JSON or missing expected fields\u0027);",
          "    }",
          "}",
          "",
          "// Log response for debugging",
          "console.log(\u0027Request:\u0027, pm.request.name);",
          "console.log(\u0027Response Status:\u0027, pm.response.status);",
          "console.log(\u0027Response Time:\u0027, pm.response.responseTime + \u0027ms\u0027);",
          "",
          "// Log any errors for debugging",
          "if (pm.response.code \u003e= 400) {",
          "    console.log(\u0027Error Response Body:\u0027, pm.response.text());",
          "}",
          "",
          "// Rate Limiting Tests",
          "if (pm.request.name.includes(\u0027Rate Limit\u0027)) {",
          "    pm.test(\u0027Rate limit headers should be present when rate limited\u0027, function () {",
          "        if (pm.response.code === 429) {",
          "            pm.expect(pm.response.headers.has(\u0027X-RateLimit-Remaining\u0027)).to.be.true;",
          "            pm.expect(pm.response.headers.has(\u0027X-RateLimit-Retry-After-Seconds\u0027)).to.be.true;",
          "            console.log(\u0027Rate limit triggered - remaining:\u0027, pm.response.headers.get(\u0027X-RateLimit-Remaining\u0027));",
          "        }",
          "    });",
          "    ",
          "    pm.test(\u0027Rate limit response should contain proper error structure\u0027, function () {",
          "        if (pm.response.code === 429) {",
          "            const responseJson = pm.response.json();",
          "            pm.expect(responseJson).to.have.property(\u0027status\u0027, \u0027RATE_LIMIT_EXCEEDED\u0027);",
          "            pm.expect(responseJson).to.have.property(\u0027errorCode\u0027, \u0027TOO_MANY_REQUESTS\u0027);",
          "            pm.expect(responseJson).to.have.property(\u0027retryAfter\u0027);",
          "        }",
          "    });",
          "}",
          "",
          "// Circuit Breaker Tests",
          "if (pm.request.name.includes(\u0027Circuit Breaker\u0027) || pm.request.name.includes(\u0027Fallback\u0027)) {",
          "    pm.test(\u0027Circuit breaker response should contain proper fallback structure\u0027, function () {",
          "        if (pm.response.code === 503) {",
          "            const responseJson = pm.response.json();",
          "            pm.expect(responseJson).to.have.property(\u0027status\u0027, \u0027CIRCUIT_BREAKER_OPEN\u0027);",
          "            pm.expect(responseJson).to.have.property(\u0027errorCode\u0027, \u0027SERVICE_UNAVAILABLE\u0027);",
          "            pm.expect(responseJson).to.have.property(\u0027suggestion\u0027);",
          "        }",
          "    });",
          "}",
          "",
          "// Load Testing",
          "if (pm.request.name.includes(\u0027Load Test\u0027) || pm.request.name.includes(\u0027Stress Test\u0027)) {",
          "    pm.test(\u0027Load test response time should be reasonable\u0027, function () {",
          "        pm.expect(pm.response.responseTime).to.be.below(10000); // 10 seconds max for load tests",
          "    });",
          "    ",
          "    pm.test(\u0027Load test should handle rate limiting gracefully\u0027, function () {",
          "        if (pm.response.code === 429) {",
          "            console.log(\u0027Rate limiting triggered during load test - this is expected behavior\u0027);",
          "        } else {",
          "            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
          "        }",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "gatewayUrl",
      "value": "http://localhost:9090",
      "type": "string",
      "description": "Gateway Service URL (Port: 9090)"
    },
    {
      "key": "productServiceUrl",
      "value": "http://localhost:8080",
      "type": "string",
      "description": "Product Service Direct URL (Port: 8080)"
    },
    {
      "key": "orderServiceUrl",
      "value": "http://localhost:8081",
      "type": "string",
      "description": "Order Service Direct URL (Port: 8081)"
    },
    {
      "key": "inventoryServiceUrl",
      "value": "http://localhost:8082",
      "type": "string",
      "description": "Inventory Service Direct URL (Port: 8082)"
    },
    {
      "key": "notificationServiceUrl",
      "value": "http://localhost:8083",
      "type": "string",
      "description": "Notification Service Direct URL (Port: 8083)"
    },
    {
      "key": "productId",
      "value": "1",
      "type": "string",
      "description": "Dynamic product ID for testing"
    },
    {
      "key": "orderNumber",
      "value": "",
      "type": "string",
      "description": "Dynamic order number for testing"
    },
    {
      "key": "customerName",
      "value": "John Doe",
      "type": "string",
      "description": "Test customer name"
    },
    {
      "key": "lastOrderNumber",
      "value": "",
      "type": "string",
      "description": "Last created order number"
    },
    {
      "key": "lastProductId",
      "value": "",
      "type": "string",
      "description": "Last created product ID"
    },
    {
      "key": "rateLimitTestUser",
      "value": "rate-test-user-1",
      "type": "string",
      "description": "User ID for rate limiting tests"
    },
    {
      "key": "circuitBreakerTestCounter",
      "value": "0",
      "type": "string",
      "description": "Counter for circuit breaker tests"
    },
    {
      "key": "randomPrice",
      "value": "299.99",
      "type": "string",
      "description": "Random price for load testing"
    }
  ]
}
