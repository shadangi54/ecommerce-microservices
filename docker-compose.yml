version: "3.8"

services:
  # Infrastructure Services
  redis:
    image: redis:latest
    container_name: ecom-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecom-network

  kafka:
    image: bitnami/kafka:latest
    container_name: ecom-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --list --bootstrap-server localhost:9092",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecom-network

  # Core Microservices
  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: ecom-discovery-service
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8761/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecom-network

  # Auth Service (Commented out for development/testing)
  # auth-service:
  #   build:
  #     context: ./auth-service
  #     dockerfile: Dockerfile
  #   container_name: ecom-auth-service
  #   ports:
  #     - "8084:8084"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     SPRING_DATASOURCE_URL: jdbc:h2:mem:authdb;MODE=MySQL
  #     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
  #   depends_on:
  #     discovery-service:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8084/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - ecom-network

  # Gateway Service (Security disabled for development)
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: ecom-gateway-service
    ports:
      - "9090:9090"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      # Security configurations commented out
      # SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://auth-service:8084
    depends_on:
      discovery-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecom-network

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: ecom-product-service
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:h2:mem:productdb;MODE=MySQL
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
    depends_on:
      discovery-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecom-network

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
      args:
        - MAVEN_OPTS=-Dmapstruct.defaultComponentModel=spring -Dmapstruct.unmappedTargetPolicy=IGNORE
    container_name: ecom-order-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:h2:mem:orderdb;MODE=MySQL
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      INVENTORY_SERVICE_URL: http://inventory-service:8082
      # Security configurations disabled
      SPRING_SECURITY_ENABLED: false
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      inventory-service:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8081/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecom-network

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: ecom-inventory-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:h2:mem:inventorydb;MODE=MySQL
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
    depends_on:
      discovery-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8082/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecom-network

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: ecom-notification-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: notification-group
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
    depends_on:
      discovery-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8083/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecom-network

networks:
  ecom-network:
    driver: bridge

volumes:
  redis-data:
